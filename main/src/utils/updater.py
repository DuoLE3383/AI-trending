# updater.py (Phi√™n b·∫£n t·ªëi ∆∞u v·ªõi asyncio.gather v√† logic multi-TP)
import logging
import sqlite3
import pandas as pd
from binance import AsyncClient
import src.config
from handlers.market_data_handler import get_market_data
import asyncio
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

async def get_usdt_futures_symbols(client: AsyncClient) -> set:
    """L·∫•y t·∫•t c·∫£ c√°c m√£ futures USDT ƒëang ho·∫°t ƒë·ªông."""
    logger.info("üîç Fetching all active USDT perpetual futures symbols...")
    try:
        exchange_info = await client.futures_exchange_info()
        symbols = {
            s['symbol'] for s in exchange_info['symbols']
            if s.get('contractType') == 'PERPETUAL' 
            and s.get('quoteAsset') == 'USDT'
            and s.get('status') == 'TRADING'
        }
        logger.info(f"‚úÖ Fetched {len(symbols)} active symbols.")
        return symbols
    except Exception as e:
        logger.error(f"‚ùå Failed to fetch symbol list: {e}", exc_info=True)
        return set()

def _update_signal_outcome(conn: sqlite3.Connection, row_id: int, new_status: str, exit_price: float) -> None:
    """
    C·∫≠p nh·∫≠t tr·∫°ng th√°i, gi√° tho√°t l·ªánh v√† th·ªùi gian x·∫£y ra cho m·ªôt t√≠n hi·ªáu.
    """
    try:
        timestamp_utc = pd.Timestamp.utcnow().isoformat()
        # C·∫¢I THI·ªÜN: C·∫≠p nh·∫≠t c·∫£ gi√° ƒë√≥ng l·ªánh (exit_price)
        conn.execute(
            "UPDATE trend_analysis SET status = ?, outcome_timestamp_utc = ?, exit_price = ? WHERE rowid = ?",
            (new_status, timestamp_utc, exit_price, row_id)
        )
        logger.info(f"‚úÖ Updated rowid {row_id} to status: {new_status} at price {exit_price}")
    except sqlite3.Error as e:
        logger.error(f"‚ùå DB update failed (rowid {row_id}): {e}", exc_info=True)

async def check_signal_outcomes(client: AsyncClient) -> None:
    """
    Ki·ªÉm tra c√°c t√≠n hi·ªáu ƒëang ho·∫°t ƒë·ªông ƒë√£ ch·∫°m TP/SL ch∆∞a.
    S·ª≠ d·ª•ng asyncio.gather ƒë·ªÉ tƒÉng hi·ªáu nƒÉng.
    """
    logger.info("üö® Checking TP/SL outcomes...")
    db_path = config.SQLITE_DB_PATH
    
    active_signals: List[sqlite3.Row] = []
    try:
        with sqlite3.connect(db_path) as conn:
            conn.row_factory = sqlite3.Row
            active_signals = conn.execute(
                "SELECT rowid, * FROM trend_analysis WHERE status = 'ACTIVE'"
            ).fetchall()
    except sqlite3.Error as e:
        logger.error(f"‚ùå DB read failed: {e}", exc_info=True)
        return

    if not active_signals:
        logger.info("‚ÑπÔ∏è No active signals to check.")
        return

    # C·∫¢I THI·ªÜN: T·∫°o c√°c t√°c v·ª• l·∫•y d·ªØ li·ªáu ƒë·ªÉ ch·∫°y ƒë·ªìng th·ªùi
    logger.info(f"üîç Concurrently fetching market data for {len(active_signals)} active signal(s)...")
    tasks = [
        get_market_data(client, signal['symbol'], config.TIMEFRAME, limit=15)
        for signal in active_signals
    ]
    # Ch·∫°y t·∫•t c·∫£ c√°c t√°c v·ª• c√πng l√∫c v√† nh·∫≠n k·∫øt qu·∫£
    market_data_results = await asyncio.gather(*tasks, return_exceptions=True)

    # D√πng m·ªôt k·∫øt n·ªëi duy nh·∫•t ƒë·ªÉ ghi t·∫•t c·∫£ c√°c thay ƒë·ªïi
    try:
        with sqlite3.connect(db_path) as conn:
            # X·ª≠ l√Ω k·∫øt qu·∫£ sau khi ƒë√£ c√≥ t·∫•t c·∫£ d·ªØ li·ªáu
            for signal, market_data in zip(active_signals, market_data_results):
                try:
                    if isinstance(market_data, Exception):
                        logger.error(f"Error fetching data for {signal['symbol']}: {market_data}")
                        continue
                    if market_data is None or market_data.empty:
                        logger.warning(f"‚ö†Ô∏è No market data returned for {signal['symbol']}.")
                        continue

                    trend = signal['trend']
                    sl, tp1, tp2, tp3 = signal['stop_loss'], signal['take_profit_1'], signal['take_profit_2'], signal['take_profit_3']

                    recent_low = market_data['low'].min()
                    recent_high = market_data['high'].max()
                    
                    # C·∫¢I THI·ªÜN: Logic ki·ªÉm tra Multi-TP, ∆∞u ti√™n TP cao nh·∫•t
                    if 'BULLISH' in trend: # For LONG trades
                        if recent_high >= tp3:
                            _update_signal_outcome(conn, signal['rowid'], 'TP3_HIT', tp3)
                        elif recent_high >= tp2:
                            _update_signal_outcome(conn, signal['rowid'], 'TP2_HIT', tp2)
                        elif recent_high >= tp1:
                            _update_signal_outcome(conn, signal['rowid'], 'TP1_HIT', tp1)
                        elif recent_low <= sl: # SL check for LONG
                            _update_signal_outcome(conn, signal['rowid'], 'SL_HIT', sl)

                    elif 'BEARISH' in trend: # For SHORT trades
                        if recent_low <= tp3:
                            _update_signal_outcome(conn, signal['rowid'], 'TP3_HIT', tp3)
                        elif recent_low <= tp2:
                            _update_signal_outcome(conn, signal['rowid'], 'TP2_HIT', tp2)
                        elif recent_low <= tp1:
                            _update_signal_outcome(conn, signal['rowid'], 'TP1_HIT', tp1)
                        elif recent_high >= sl: # SL check for SHORT
                            _update_signal_outcome(conn, signal['rowid'], 'SL_HIT', sl)
                            
                except Exception as e:
                    logger.error(f"‚ùå Error processing signal outcome ({signal['symbol']}): {e}", exc_info=True)
    except sqlite3.Error as e:
        logger.error(f"‚ùå DB write operation failed: {e}", exc_info=True)
