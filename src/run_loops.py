# src/run_loops.py
# T·ªáp n√†y ch·ª©a t·∫•t c·∫£ c√°c h√†m v√≤ng l·∫∑p c·ªßa bot.

import logging
import asyncio
import sqlite3
import os
import sys

# Imports t·ª´ c√°c module c·ªßa d·ª± √°n v√† th∆∞ vi·ªán b√™n ngo√†i
from binance import AsyncClient
from . import config # D√πng .config v√¨ ƒëang ·ªü trong th∆∞ m·ª•c src
from .analysis_engine import perform_ai_fallback_analysis, perform_elliotv8_analysis
from .notifications import NotificationHandler
from .updater import get_usdt_futures_symbols, check_signal_outcomes
from .api_server import app as flask_app

logger = logging.getLogger(__name__)

# --- C√ÅC V√íNG L·∫∂P C·ª¶A BOT ---

async def analysis_loop(client: AsyncClient, model, label_encoder, model_features):
    """LOOP 1: Ph√¢n t√≠ch th·ªã tr∆∞·ªùng li√™n t·ª•c, ch·ªçn chi·∫øn l∆∞·ª£c t·ª´ config."""
    logger.info(f"‚úÖ Analysis Loop starting (Strategy: {config.STRATEGY_MODE})")
    semaphore = asyncio.Semaphore(config.CONCURRENT_REQUESTS)

    async def process_with_semaphore(symbol: str):
        async with semaphore:
            if config.STRATEGY_MODE == 'Elliotv8':
                await perform_elliotv8_analysis(client, symbol)
            else:
                await perform_ai_fallback_analysis(client, symbol, model, label_encoder, model_features)

    while True:
        try:
            current_symbols = await get_usdt_futures_symbols(client)
            if not current_symbols:
                logger.warning("Kh√¥ng t√¨m th·∫•y symbol n√†o ƒë·ªÉ ph√¢n t√≠ch. B·ªè qua chu k·ª≥ n√†y.")
                await asyncio.sleep(config.LOOP_SLEEP_INTERVAL_SECONDS)
                continue
            
            logger.info(f"--- B·∫Øt ƒë·∫ßu chu k·ª≥ ph√¢n t√≠ch cho {len(current_symbols)} symbols ---")
            tasks = [process_with_semaphore(s) for s in current_symbols]
            await asyncio.gather(*tasks)
            logger.info(f"--- Chu k·ª≥ ph√¢n t√≠ch ho√†n t·∫•t. T·∫°m ngh·ªâ {config.LOOP_SLEEP_INTERVAL_SECONDS} gi√¢y. ---")
            await asyncio.sleep(config.LOOP_SLEEP_INTERVAL_SECONDS)
        except Exception as e:
            logger.error(f"L·ªói trong analysis_loop: {e}", exc_info=True)
            await asyncio.sleep(60)

async def signal_check_loop(notifier: NotificationHandler):
    """LOOP 2: Ki·ªÉm tra t√≠n hi·ªáu m·ªõi trong DB ƒë·ªÉ g·ª≠i th√¥ng b√°o."""
    logger.info("‚úÖ New Signal Alert Loop starting...")
    notified_signal_ids = set()
    try:
        with sqlite3.connect(f'file:{config.SQLITE_DB_PATH}?mode=ro', uri=True) as conn:
            existing_ids = conn.execute("SELECT rowid FROM trend_analysis WHERE status = 'ACTIVE'").fetchall()
            notified_signal_ids.update(row[0] for row in existing_ids)
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi t·∫°o signal_check_loop: {e}")

    while True:
        try:
            with sqlite3.connect(f'file:{config.SQLITE_DB_PATH}?mode=ro', uri=True) as conn:
                conn.row_factory = sqlite3.Row
                all_active_signals = conn.execute("SELECT rowid, * FROM trend_analysis WHERE status = 'ACTIVE'").fetchall()
            new_signals_to_notify = [s for s in all_active_signals if s['rowid'] not in notified_signal_ids]
            if new_signals_to_notify:
                logger.info(f"Ph√°t hi·ªán {len(new_signals_to_notify)} t√≠n hi·ªáu m·ªõi c·∫ßn th√¥ng b√°o.")
                for signal in new_signals_to_notify:
                    notifier.queue_signal(dict(signal))
                    notified_signal_ids.add(signal['rowid'])
        except Exception as e:
            logger.error(f"L·ªói trong signal_check_loop: {e}", exc_info=True)
        await asyncio.sleep(config.SIGNAL_CHECK_INTERVAL_SECONDS)

async def updater_loop(client: AsyncClient):
    """LOOP 3: C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c t√≠n hi·ªáu (check TP/SL)."""
    logger.info("‚úÖ Trade Updater Loop starting...")
    while True:
        try:
            await check_signal_outcomes(client)
        except Exception as e:
            logger.error(f"L·ªói nghi√™m tr·ªçng trong updater_loop: {e}", exc_info=True)
        await asyncio.sleep(config.UPDATER_INTERVAL_SECONDS)

async def outcome_check_loop(notifier: NotificationHandler):
    """LOOP 4: Ki·ªÉm tra c√°c giao d·ªãch ƒë√£ ƒë√≥ng ƒë·ªÉ g·ª≠i th√¥ng b√°o k·∫øt qu·∫£."""
    logger.info("‚úÖ Trade Outcome Notification Loop starting...")
    notified_trade_ids = set()
    try:
        with sqlite3.connect(f'file:{config.SQLITE_DB_PATH}?mode=ro', uri=True) as conn:
            closed_trades = conn.execute("SELECT rowid FROM trend_analysis WHERE status != 'ACTIVE'").fetchall()
            notified_trade_ids.update(row[0] for row in closed_trades)
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi t·∫°o outcome_check_loop: {e}")

    while True:
        try:
            with sqlite3.connect(f'file:{config.SQLITE_DB_PATH}?mode=ro', uri=True) as conn:
                conn.row_factory = sqlite3.Row
                all_closed_trades = conn.execute("SELECT rowid, * FROM trend_analysis WHERE status != 'ACTIVE'").fetchall()
                newly_closed_trades = [t for t in all_closed_trades if t['rowid'] not in notified_trade_ids]
            if newly_closed_trades:
                logger.info(f"Ph√°t hi·ªán {len(newly_closed_trades)} giao d·ªãch v·ª´a ƒë√≥ng.")
                for trade in newly_closed_trades:
                    notifier.queue_trade_outcome(dict(trade))
                    notified_trade_ids.add(trade['rowid'])
        except Exception as e:
            logger.error(f"L·ªói trong outcome_check_loop: {e}", exc_info=True)
        await asyncio.sleep(config.SIGNAL_CHECK_INTERVAL_SECONDS)

async def notification_flush_loop(notifier: NotificationHandler):
    """LOOP 5: G·ª≠i c√°c th√¥ng b√°o trong h√†ng ƒë·ª£i m·ªôt c√°ch ƒë·ªãnh k·ª≥."""
    logger.info("‚úÖ Notification Queue Flush Loop starting (10 min interval)...")
    while True:
        await asyncio.sleep(10 * 60)
        logger.info("‚è∞ ƒê·∫øn gi·ªù, g·ª≠i c√°c th√¥ng b√°o ƒëang ch·ªù...")
        await asyncio.gather(
            notifier.flush_signal_queue(),
            notifier.flush_outcome_queue()
        )

async def summary_loop(notifier: NotificationHandler):
    """LOOP 6: G·ª≠i t√≥m t·∫Øt hi·ªáu su·∫•t ho·∫°t ƒë·ªông ƒë·ªãnh k·ª≥."""
    logger.info("‚úÖ Periodic Summary Loop starting (60 min interval)...")
    while True:
        await asyncio.sleep(60 * 60)
        logger.info("üì∞ T·∫°o v√† g·ª≠i t√≥m t·∫Øt hi·ªáu su·∫•t ƒë·ªãnh k·ª≥...")
        await notifier.send_periodic_summary_notification()

# Trong t·ªáp: src/run_loops.py

async def update_loop(notifier: NotificationHandler):
    """LOOP 7: T·ª± ƒë·ªông ki·ªÉm tra c·∫≠p nh·∫≠t t·ª´ Git v√† kh·ªüi ƒë·ªông l·∫°i bot."""
    logger.info("‚úÖ Auto-update Loop starting...")
    remote_name = "origin"
    branch_name = "ai"
    remote_branch = f"{remote_name}/{branch_name}"

    while True:
        await asyncio.sleep(10 * 60)
        try:
            logger.info("üì° Ki·ªÉm tra c·∫≠p nh·∫≠t m√£ ngu·ªìn t·ª´ Git...")

            # S·ª¨A L·ªñI: T√°ch await v√† .wait()
            fetch_process = await asyncio.create_subprocess_shell(
                f'git fetch {remote_name}',
                stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            await fetch_process.wait()

            local_hash_proc = await asyncio.create_subprocess_shell('git rev-parse HEAD', stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
            local_hash_out, _ = await local_hash_proc.communicate()

            remote_hash_proc = await asyncio.create_subprocess_shell(f'git rev-parse {remote_branch}', stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
            remote_hash_out, remote_hash_err = await remote_hash_proc.communicate()

            if remote_hash_proc.returncode != 0:
                logger.error(f"Kh√¥ng th·ªÉ l·∫•y commit hash t·ª´ remote '{remote_branch}': {remote_hash_err.decode().strip()}")
                continue
            
            local_hash = local_hash_out.decode().strip()
            remote_hash = remote_hash_out.decode().strip()

            if local_hash != remote_hash:
                logger.info(f"üí° Ph√°t hi·ªán m√£ ngu·ªìn m·ªõi tr√™n {remote_branch}! ƒêang th·ª≠ c·∫≠p nh·∫≠t...")
                
                # S·ª¨A L·ªñI: T√°ch await v√† .wait()
                stash_proc = await asyncio.create_subprocess_shell(
                    'git stash',
                    stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
                )
                await stash_proc.wait()
                
                # S·ª¨A L·ªñI: T√°ch await v√† .wait()
                pull_process = await asyncio.create_subprocess_shell(
                    f'git pull {remote_name} {branch_name}',
                    stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
                )
                pull_stdout, pull_stderr = await pull_process.communicate() # D√πng communicate() ƒë·ªÉ l·∫•y output

                if pull_process.returncode == 0:
                    logger.critical(f"‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng! Chu·∫©n b·ªã kh·ªüi ƒë·ªông l·∫°i bot...\n{pull_stdout.decode()}")
                    await notifier.send_message_to_all("üö® Bot ƒëang kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ √°p d·ª•ng phi√™n b·∫£n m·ªõi...")
                    await asyncio.sleep(5)
                    os.execv(sys.executable, ['python'] + sys.argv)
                else:
                    logger.error(f"‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i: {pull_stderr.decode()}")
                    await notifier.send_message_to_all(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t t·ª´ Git:\n`{pull_stderr.decode()}`")
            else:
                logger.info(f"‚úÖ M√£ ngu·ªìn ƒë√£ ·ªü phi√™n b·∫£n m·ªõi nh·∫•t ({remote_branch}).")

        except Exception as e:
            logger.error(f"‚ùå L·ªói trong v√≤ng l·∫∑p t·ª± ƒë·ªông c·∫≠p nh·∫≠t: {e}", exc_info=True)

def run_api_server():
    """H√†m ƒë·ªìng b·ªô ƒë·ªÉ ch·∫°y Flask server trong m·ªôt thread ri√™ng."""
    logger.info("‚úÖ Starting API server in a background thread...")
    flask_app.run(host='0.0.0.0', port=8080, debug=False)