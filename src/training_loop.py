# training_loop.py (Phi√™n b·∫£n ƒë√£ s·ª≠a l·ªói g·ªçi h√†m)
import asyncio
import logging
from .ml.trainer import train_model
from .notifications import NotificationHandler
from .performance_analyzer import get_performance_stats
from . import config as config
logger = logging.getLogger(__name__)

async def training_loop(notifier, total_symbols):
    logger.info("‚úÖ Periodic AI Model Training Loop starting...")
    while True:
        await asyncio.sleep(config.TRAINING_INTERVAL_SECONDS)
        logger.info("ü§ñ Starting periodic model training...")
        try:
            # Ch·∫°y h√†m hu·∫•n luy·ªán ƒë·ªìng b·ªô trong m·ªôt executor ri√™ng
            loop = asyncio.get_running_loop()
            new_accuracy = await loop.run_in_executor(None, train_model)
            
            if new_accuracy is not None:
                logger.info(f"‚úÖ Periodic training complete. New accuracy: {new_accuracy:.2f}%")
                await notifier.send_training_success_notification(new_accuracy, total_symbols)
            else:
                # Tr∆∞·ªùng h·ª£p train_model tr·∫£ v·ªÅ None (v√≠ d·ª•: kh√¥ng ƒë·ªß d·ªØ li·ªáu)
                logger.warning("Periodic training did not produce a new model (e.g., insufficient data).")
                await notifier.send_training_failed_notification(error="Insufficient data for training.")

        except Exception as e:
            # === ƒê√ÇY L√Ä THAY ƒê·ªîI QUAN TR·ªåNG NH·∫§T ===
            # Th√™m exc_info=True ƒë·ªÉ in ra to√†n b·ªô l·ªói chi ti·∫øt v√†o console.
            logger.error(f"‚ùå An exception occurred during periodic training: {e}", exc_info=True)
            # G·ª≠i th√¥ng b√°o l·ªói t·ªõi Telegram
            await notifier.send_training_failed_notification(error=str(e))