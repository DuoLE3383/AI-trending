# notifications.py (Phi√™n b·∫£n ƒë√£ s·ª≠a l·ªói v√† c·∫£i thi·ªán)
import logging
from telegram_handler import TelegramHandler
import config

class NotificationHandler:
    def __init__(self, telegram_handler: TelegramHandler):
        self.telegram_handler = telegram_handler
        self.logger = logging.getLogger(__name__)

    async def send_startup_notification(self, symbols_count: int):
        """
        G·ª≠i tin nh·∫Øn th√¥ng b√°o khi bot kh·ªüi ƒë·ªông, k√®m l·ªùi m·ªùi h·∫•p d·∫´n.
        """
        self.logger.info("Preparing startup notification...")

        message = (
            f"üöÄ **AI Trading Bot has been successfully activated!**\n\n"
            f"‚ú® The bot is now live and analyzing **{symbols_count}** USDT pairs on the `{config.TIMEFRAME}` timeframe.\n"
            f"üì° Get ready for real-time market signals!\n\n"
            f"----------------------------------------\n\n"
            f"üí∞ **New to Binance? Get a $100 Bonus!**\n\n"
            f"Sign up on the world's largest crypto exchange platform and earn a **100 USD trading fee rebate voucher!**\n\n"
            f"üîó **Register Now:**\n"
            f"https://www.binance.com/activity/referral-entry/CPA?ref=CPA_006MBW985P"
        )

        try:
            await self.telegram_handler.send_message(
                chat_id=config.TELEGRAM_CHAT_ID,
                message=message,
                message_thread_id=config.TELEGRAM_MESSAGE_THREAD_ID,
                parse_mode="Markdown"
            )
            self.logger.info("Startup notification sent successfully.")
        except Exception as e:
            self.logger.error(f"Failed to send startup notification: {e}")

    async def send_batch_trend_alert_notification(self, chat_id: str, message_thread_id: str, analysis_results: list):
        """
        G·ª≠i th√¥ng b√°o t√≠n hi·ªáu theo l√¥ v·ªõi c·∫•u tr√∫c Header, Body, Footer.
        """
        if not analysis_results:
            return

        # --- 1. Header ---
        header = f"üî• *{len(analysis_results)} New Signal(s) Found!* üî•\n\n"

        # --- 2. Body (Danh s√°ch t√≠n hi·ªáu) ---
        message_lines = []
        for result in analysis_results:
            symbol = result.get('symbol', 'N/A')
            trend = result.get('trend', 'N/A').replace("_", " ").title()
            price = result.get('last_price', 0)
            
            trend_emoji = "üîº" if "Bullish" in trend else "üîΩ"
            # T·∫°o d√≤ng cho m·ªói t√≠n hi·ªáu
            formatted_line = f"{trend_emoji} *{symbol}* - {trend} at `${price:,.4f}`"
            message_lines.append(formatted_line)
        
        body = "\n".join(message_lines)

        # --- 3. Footer ---
        # S·ª≠ d·ª•ng 3 d·∫•u ngo·∫∑c k√©p """...""" cho chu·ªói ƒëa d√≤ng
        footer = """
----------------------------------------

üí∞ **New to Binance? Get a $100 Bonus!**
Sign up and earn a **100 USD trading fee rebate voucher!**

üîó **Register Now:**
https://www.binance.com/activity/referral-entry/CPA?ref=CPA_006MBW985P
"""

        # --- 4. Gh√©p t·∫•t c·∫£ l·∫°i ---
        full_message = header + body + footer
        
        try:
            await self.telegram_handler.send_message(
                chat_id=chat_id,
                message=full_message,
                message_thread_id=message_thread_id,
                parse_mode="Markdown"
            )
            self.logger.info(f"Successfully sent combined signal alert for {len(analysis_results)} symbols.")
        except Exception as e:
            self.logger.error(f"Could not send signal batch due to an error.")
            
            
# In notifications.py

class NotificationHandler:
    # ... (init function and other methods are correct) ...

    # --- C·∫¢I TI·∫æN: S·ª≠a l·ªói Markdown trong footer ---
    def _get_common_footer(self) -> str:
        """
        T·∫°o ph·∫ßn footer chung ch·ª©a link gi·ªõi thi·ªáu.
        ƒê√£ s·ª≠a l·ªói Markdown b·∫±ng c√°ch "escape" c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát ('_' v√† '-').
        """
        # The separator line with escaped hyphens
        separator = r"----------------------------------------"

        # The link with an escaped underscore in the ref code
        link = r"https://www.binance.com/activity/referral-entry/CPA?ref=CPA_006MBW985P"

        # By using raw strings (r"...") we make it cleaner, but you could also write it as:
        # separator = "\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\"
        # link = "https://www.binance.com/activity/referral-entry/CPA?ref=CPA\\_006MBW985P"
        
        return (
            f"\n{separator}\n\n"
            "üí∞ **New to Binance? Get a $100 Bonus!**\n\n"
            "Sign up on the world's largest crypto exchange platform and earn a **100 USD trading fee rebate voucher!**\n\n"
            "üîó **Register Now:**\n"
            f"{link}"
        )

    # ... (the rest of your NotificationHandler class) ...


