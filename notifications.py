# notifications.py
import logging
from typing import List, Dict, Any
from telegram_handler import TelegramHandler
import config

class NotificationHandler:
    """
    Qu·∫£n l√Ω vi·ªác t·∫°o v√† g·ª≠i t·∫•t c·∫£ c√°c lo·∫°i th√¥ng b√°o qua Telegram.
    """
    def __init__(self, telegram_handler: TelegramHandler):
        self.telegram_handler = telegram_handler
        self.logger = logging.getLogger(__name__)

    def _get_common_footer(self) -> str:
        """
        T·∫°o ph·∫ßn footer chung ch·ª©a link gi·ªõi thi·ªáu ƒë·ªÉ s·ª≠ d·ª•ng trong nhi·ªÅu th√¥ng b√°o.
        ƒê√£ s·ª≠a l·ªói Markdown b·∫±ng c√°ch s·ª≠ d·ª•ng raw string ƒë·ªÉ gi·ªØ nguy√™n k√Ω t·ª± '\'.
        """
        # S·ª≠ d·ª•ng raw string (r"...") l√† c√°ch t·ªët nh·∫•t ƒë·ªÉ ƒë·∫£m b·∫£o c√°c k√Ω t·ª± escape
        # nh∆∞ '\' ƒë∆∞·ª£c g·ª≠i ƒëi ch√≠nh x√°c t·ªõi API c·ªßa Telegram.
        separator = r"----------------------------------------"
        link = r"https://www.binance.com/activity/referral-entry/CPA?ref=CPA_006MBW985P"
        
        return (
            f"\n{separator}\n\n"
            "üí∞ **New to Binance? Get a $100 Bonus!**\n\n"
            "Sign up on the world's largest crypto exchange platform and earn a **100 USD trading fee rebate voucher!**\n\n"
            "üîó **Register Now:**\n"
            f"{link}"
        )

    async def send_startup_notification(self, symbols_count: int):
        """
        G·ª≠i tin nh·∫Øn th√¥ng b√°o khi bot kh·ªüi ƒë·ªông.
        """
        self.logger.info("Preparing startup notification...")

        message_body = (
            f"üöÄ **AI Trading Bot has been successfully activated!**\n\n"
            f"‚ú® The bot is now live and analyzing **{symbols_count}** USDT pairs on the `{config.TIMEFRAME}` timeframe.\n"
            f"üì° Get ready for real-time market signals!"
        )
        
        # Gh√©p body v√† footer (l·∫•y t·ª´ h√†m chung)
        full_message = message_body + self._get_common_footer()

        try:
            await self.telegram_handler.send_message(
                chat_id=config.TELEGRAM_CHAT_ID,
                message=full_message,
                message_thread_id=config.TELEGRAM_MESSAGE_THREAD_ID,
                parse_mode="MarkdownV2" # S·ª≠ d·ª•ng MarkdownV2 ƒë·ªÉ t∆∞∆°ng th√≠ch t·ªët h∆°n v·ªõi k√Ω t·ª± escape
            )
            self.logger.info("Startup notification sent successfully.")
        except Exception as e:
            self.logger.error(f"Failed to send startup notification: {e}", exc_info=True)

    async def send_batch_trend_alert_notification(self, analysis_results: List[Dict[str, Any]]):
        """
        G·ª≠i th√¥ng b√°o t√≠n hi·ªáu theo l√¥ v·ªõi c·∫•u tr√∫c Header, Body, Footer.
        """
        if not analysis_results:
            return

        self.logger.info(f"Preparing to send a batch of {len(analysis_results)} signals.")

        # --- Header ---
        header = f"üî• *{len(analysis_results)} New Signal(s) Found\\!* üî•\n"

        # --- Body ---
        message_lines = []
        for result in analysis_results:
            symbol = result.get('symbol', 'N/A')
            # C·∫ßn escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong symbol n·∫øu c√≥, v√≠ d·ª•: 'BTC-USDT'
            safe_symbol = symbol.replace('-', '\\-')
            trend = result.get('trend', 'N/A').replace("_", " ").title()
            price = result.get('last_price', 0)
            
            trend_emoji = "üîº" if "Bullish" in trend else "üîΩ"
            # ƒê·ªãnh d·∫°ng gi√° ƒë·ªÉ d·ªÖ ƒë·ªçc h∆°n v√† escape k√Ω t·ª± '.'
            formatted_price = str(price).replace('.', '\\.')
            formatted_line = f"{trend_emoji} *{safe_symbol}* \\- {trend} at `${formatted_price}`"
            message_lines.append(formatted_line)
        
        body = "\n".join(message_lines)

        # --- Gh√©p t·∫•t c·∫£ l·∫°i v√† th√™m footer ---
        full_message = header + "\n" + body + self._get_common_footer()
        
        try:
            await self.telegram_handler.send_message(
                chat_id=config.TELEGRAM_CHAT_ID,
                message=full_message,
                message_thread_id=config.TELEGRAM_MESSAGE_THREAD_ID,
                parse_mode="MarkdownV2"
            )
            self.logger.info(f"Successfully sent combined signal alert for {len(analysis_results)} symbols.")
        except Exception as e:
            self.logger.error(f"Could not send signal batch due to an error: {e}", exc_info=True)

    async def send_summary_report(self, stats: Dict[str, Any]):
        """
        ƒê·ªãnh d·∫°ng v√† g·ª≠i b√°o c√°o hi·ªáu su·∫•t ƒë·ªãnh k·ª≥.
        """
        self.logger.info("Preparing performance summary report...")
        
        header = "üèÜ *Strategy Performance Report (All\\-Time)* üèÜ\n"

        if 'error' in stats:
            body = "\nCould not generate statistics."
        elif stats.get('total_completed_trades', 0) > 0:
            # Escape c√°c k√Ω t·ª± '.' trong t·ª∑ l·ªá
            win_rate_str = str(stats['win_rate']).replace('.', '\\.')
            loss_rate_str = str(stats['loss_rate']).replace('.', '\\.')
            body = (
                f"\n‚úÖ *Win Rate:* `{win_rate_str}`"
                f"\n‚ùå *Loss Rate:* `{loss_rate_str}`"
                f"\nüìä *Completed Trades:* `{stats['total_completed_trades']}`"
            )
        else:
            body = "\nNo completed trades to analyze yet."

        full_message = header + body
        
        try:
            await self.telegram_handler.send_message(
                chat_id=config.TELEGRAM_CHAT_ID,
                message=full_message,
                message_thread_id=config.TELEGRAM_MESSAGE_THREAD_ID,
                parse_mode="MarkdownV2"
            )
            self.logger.info("Successfully sent performance report to Telegram.")
        except Exception as e:
            self.logger.error(f"Failed to send performance report: {e}", exc_info=True)
