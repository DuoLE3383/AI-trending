# notifications.py
import logging
from typing import List, Dict, Any
from telegram_handler import TelegramHandler
import config

class NotificationHandler:
    def __init__(self, telegram_handler: TelegramHandler):
        self.telegram_handler = telegram_handler
        self.logger = logging.getLogger(__name__)

    def _get_common_footer(self) -> str:
        """T·∫°o ph·∫ßn footer chung ch·ª©a link gi·ªõi thi·ªáu ƒë·ªÉ s·ª≠ d·ª•ng trong nhi·ªÅu th√¥ng b√°o."""
        separator = r"----------------------------------------"
        # L∆∞u √Ω: C√°c k√Ω t·ª± ƒë·∫∑c bi·ªát c·ªßa MarkdownV2 nh∆∞ . ! - ph·∫£i ƒë∆∞·ª£c tho√°t b·∫±ng d·∫•u \
        link = r"https://www.binance.com/activity/referral-entry/CPA?ref=CPA_006MBW985P"
        return (
            f"\n{separator}\n\n"
            "üí∞ *New to Binance? Get a \\$100 Bonus\\!* üí∞\n\n"
            "Sign up and earn a *100 USD trading fee rebate voucher\\!*\n\n"
            "üîó *Register Now:*\n"
            f"{link}"
        )

    async def send_startup_notification(self, symbols_count: int):
        """G·ª≠i tin nh·∫Øn th√¥ng b√°o khi bot kh·ªüi ƒë·ªông."""
        self.logger.info("Preparing startup notification...")
        message_body = (
            f"üöÄ *AI Trading Bot has been successfully activated\\!* üöÄ\n\n"
            f"‚ú® The bot is now live and analyzing `{symbols_count}` USDT pairs on the `{config.TIMEFRAME}` timeframe\\.\n"
            f"üì° Get ready for real\\-time market signals\\!"
        )
        full_message = message_body + self._get_common_footer()
        try:
            await self.telegram_handler.send_message(
                chat_id=config.TELEGRAM_CHAT_ID,
                message=full_message,
                message_thread_id=config.TELEGRAM_MESSAGE_THREAD_ID,
                parse_mode="MarkdownV2"
            )
            self.logger.info("Startup notification sent successfully.")
        except Exception as e:
            self.logger.error(f"Failed to send startup notification: {e}", exc_info=True)

    async def send_batch_trend_alert_notification(self, analysis_results: List[Dict[str, Any]]):
        """G·ª≠i th√¥ng b√°o t√≠n hi·ªáu theo l√¥. L·∫•y chat_id t·ª´ config."""
        if not analysis_results:
            return
        self.logger.info(f"Preparing to send a batch of {len(analysis_results)} signals.")
        header = f"üî• *{len(analysis_results)} New Signal(s) Found\\!* üî•\n"
        message_lines = []
        for result in analysis_results:
            symbol = result.get('symbol', 'N/A').replace('-', '\\-')
            trend = result.get('trend', 'N/A').replace("_", " ").title()
            price = result.get('last_price', 0)
            # Tho√°t k√Ω t·ª± '.' ƒë·ªÉ tr√°nh l·ªói MarkdownV2
            formatted_price = str(price).replace('.', '\\.')
            trend_emoji = "üîº" if "Bullish" in trend else "üîΩ"
            formatted_line = f"{trend_emoji} *{symbol}* \\- {trend} at `${formatted_price}`"
            message_lines.append(formatted_line)
        body = "\n".join(message_lines)
        full_message = header + "\n" + body + self._get_common_footer()
        try:
            await self.telegram_handler.send_message(
                chat_id=config.TELEGRAM_CHAT_ID,
                message=full_message,
                message_thread_id=config.TELEGRAM_MESSAGE_THREAD_ID,
                parse_mode="MarkdownV2"
            )
            self.logger.info(f"Successfully sent combined signal alert for {len(analysis_results)} symbols.")
        except Exception as e:
            self.logger.error(f"Could not send signal batch: {e}", exc_info=True)

    async def send_summary_report(self, stats: Dict[str, Any]):
        """ƒê·ªãnh d·∫°ng v√† g·ª≠i b√°o c√°o hi·ªáu su·∫•t ƒë·ªãnh k·ª≥."""
        self.logger.info("Preparing performance summary report...")
        header = "üèÜ *Strategy Performance Report (All\\-Time)* üèÜ\n"
        if 'error' in stats:
            body = "\nCould not generate statistics due to an error."
        elif stats.get('total_completed_trades', 0) > 0:
            # Tho√°t k√Ω t·ª± '.' trong t·ª∑ l·ªá
            win_rate_str = str(stats['win_rate']).replace('.', '\\.')
            loss_rate_str = str(stats['loss_rate']).replace('.', '\\.')
            body = (
                f"\n‚úÖ *Win Rate:* `{win_rate_str}`"
                f"\n‚ùå *Loss Rate:* `{loss_rate_str}`"
                f"\nüìä *Completed Trades:* `{stats['total_completed_trades']}`"
            )
        else:
            body = "\nNo completed trades to analyze yet."
        full_message = header + body + self._get_common_footer()
        try:
            await self.telegram_handler.send_message(
                chat_id=config.TELEGRAM_CHAT_ID,
                message=full_message,
                message_thread_id=config.TELEGRAM_MESSAGE_THREAD_ID,
                parse_mode="MarkdownV2"
            )
            self.logger.info("Successfully sent performance report to Telegram.")
        except Exception as e:
            self.logger.error(f"Failed to send performance report: {e}", exc_info=True)
            
    # <<< H√ÄM M·ªöI ƒê√É ƒê∆Ø·ª¢C TH√äM V√ÄO >>>
    async def send_heartbeat_notification(self, symbols_count: int):
        """G·ª≠i tin nh·∫Øn 'nh·ªãp tim' ƒë·ªÉ x√°c nh·∫≠n bot v·∫´n ƒëang ho·∫°t ƒë·ªông."""
        self.logger.info("Sending heartbeat notification...")
        message = (
            f"‚ù§Ô∏è *Bot Status: ALIVE* ‚ù§Ô∏è\n\n"
            f"The bot is running correctly and currently monitoring `{symbols_count}` symbols\\. "
            f"No critical errors have been detected\\."
        )
        try:
            await self.telegram_handler.send_message(
                chat_id=config.TELEGRAM_CHAT_ID,
                message=message,
                message_thread_id=config.TELEGRAM_MESSAGE_THREAD_ID,
                parse_mode="MarkdownV2",
                # G·ª≠i m·ªôt c√°ch "im l·∫∑ng" ƒë·ªÉ kh√¥ng l√†m phi·ªÅn ng∆∞·ªùi d√πng
                disable_notification=True 
            )
            self.logger.info("Heartbeat notification sent successfully.")
        except Exception as e:
            self.logger.error(f"Failed to send heartbeat notification: {e}", exc_info=True)

