# training_loop.py (Phi√™n b·∫£n Ho√†n thi·ªán)
import asyncio
import logging
from trainer import train_model
from notifications import NotificationHandler
from performance_analyzer import get_performance_stats

logger = logging.getLogger(__name__)

async def training_loop(notification_handler: NotificationHandler):
    """
    V√≤ng l·∫∑p ch·∫°y vi·ªác hu·∫•n luy·ªán model ƒë·ªãnh k·ª≥ v√† g·ª≠i m·ªôt th√¥ng b√°o k·∫øt h·ª£p duy nh·∫•t.
    """
    while True:
        try:
            logger.info("üîÅ Starting scheduled model training cycle (every 8 hours)...")
            
            # B∆∞·ªõc 1: L·∫•y d·ªØ li·ªáu th·ªëng k√™ hi·ªáu su·∫•t
            stats = get_performance_stats()
            
            # B∆∞·ªõc 2: Hu·∫•n luy·ªán model (t√°c v·ª• n·∫∑ng, ch·∫°y tr√™n thread ri√™ng)
            loop = asyncio.get_running_loop()
            logger.info("üöÄ Offloading model training to a separate thread...")
            accuracy = await loop.run_in_executor(None, train_model)
            logger.info("‚úÖ Training task finished.")

            # B∆∞·ªõc 3: G·ªçi M·ªòT h√†m th√¥ng b√°o duy nh·∫•t, truy·ªÅn c·∫£ stats v√† accuracy
            await notification_handler.send_training_and_summary_notification(stats, accuracy)

        except Exception as e:
            logger.error(f"‚ùå An error occurred in the training loop: {e}", exc_info=True)
            # N·∫øu c√≥ l·ªói, v·∫´n c·ªë g·∫Øng g·ª≠i th√¥ng b√°o l·ªói
            try:
                stats = get_performance_stats()
                await notification_handler.send_training_and_summary_notification(stats, None) # G·ª≠i accuracy l√† None
            except Exception as notify_err:
                logger.error(f"‚ùå Also failed to send error notification: {notify_err}")
        
        logger.info("Training cycle finished. Sleeping for 8 hours.")
        await asyncio.sleep(8 * 60 * 60) # 8 ti·∫øng