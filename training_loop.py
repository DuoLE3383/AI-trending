# training_loop.py (Phi√™n b·∫£n ƒë√£ s·ª≠a l·ªói TypeError)
import asyncio
import logging
from trainer import train_model
from notifications import NotificationHandler
from performance_analyzer import get_performance_stats

logger = logging.getLogger(__name__)

async def training_loop(notification_handler: NotificationHandler, symbols_count: int):
    """
    V√≤ng l·∫∑p ch·∫°y vi·ªác hu·∫•n luy·ªán model ƒë·ªãnh k·ª≥ m·ªói 8 gi·ªù.
    S·ª¨A L·ªñI: H√†m n√†y gi·ªù ƒë√¢y nh·∫≠n 'symbols_count' ƒë·ªÉ c√≥ th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫ßy ƒë·ªß.
    """
    while True:
        try:
            logger.info("üîÅ Starting scheduled model training cycle (every 8 hours)...")
            
            # L·∫•y th√¥ng tin th·ªëng k√™ ƒë·ªÉ g·ª≠i k√®m (t√πy ch·ªçn)
            stats = get_performance_stats() 
            await notification_handler.send_training_and_summary_notification(stats)

            # Ch·∫°y training trong m·ªôt thread ri√™ng
            loop = asyncio.get_running_loop()
            logger.info("üöÄ Offloading model training to a separate thread...")
            accuracy = await loop.run_in_executor(None, train_model)
            logger.info("‚úÖ Training task finished.")

            # G·ª≠i th√¥ng b√°o k·∫øt qu·∫£ training
            # S·ª¨A L·ªñI: Truy·ªÅn c·∫£ accuracy v√† symbols_count v√†o
            await notification_handler.send_training_complete_notification(accuracy, symbols_count)

        except Exception as e:
            logger.error(f"‚ùå An error occurred in the training loop: {e}", exc_info=True)
            # G·ª≠i th√¥ng b√°o l·ªói n·∫øu c√≥ th·ªÉ
            await notification_handler.send_training_complete_notification(None, symbols_count)
        
        logger.info("Training cycle finished. Sleeping for 8 hours.")
        await asyncio.sleep(8 * 60 * 60) # 8 ti·∫øng
